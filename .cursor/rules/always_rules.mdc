---
description: 
globs: 
alwaysApply: true
---
# NFC + AI 기반 병원 검사·진료 안내 시스템 - Always Rules

## 프로젝트 개요
이 규칙은 NFC + AI 기반 병원 검사·진료 안내 시스템 개발에 필요한 핵심 가이드라인을 제공합니다. 모든 채팅과 command+k 요청에 자동으로 적용됩니다.

**도움이 되는 작업**: API 개발, 인증 구현, 데이터베이스 설계, 보안 정책 적용, 에러 핸들링

## 1. 기술 스택 및 아키텍처

### 백엔드
- **API 서버**: Node.js (Express.js)
- **AI 서버**: Python (Flask)
- **데이터베이스**: MySQL (RDS)
- **스토리지**: AWS S3
- **CDN**: CloudFront

### 프론트엔드
- **웹앱**: React PWA
- **스타일링**: Tailwind CSS (코어 유틸리티 클래스만 사용)
- **NFC**: Web NFC API

### 보안 및 인증
- **프로토콜**: HTTPS/TLS 1.3 강제
- **인증**: JWT 토큰 (1시간 만료)
- **암호화**: AES-256-GCM (개인정보)
- **CSP**: script-src 'self' cdn.jsdelivr.net

## 2. API 설계 원칙

### 기본 규칙
- **Base URL**: `https://api.nfc-hospital.kr/v1`
- **HTTP Methods**: GET, POST, PUT, DELETE
- **Content-Type**: `application/json`
- **인증 헤더**: `Authorization: Bearer <JWT_TOKEN>`

### 표준 응답 형식
```json
{
  "success": true|false,
  "data": {},
  "message": "설명 메시지",
  "timestamp": "2025-06-27T10:30:00Z"
}
```

### 오류 응답 형식
```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "오류 메시지",
    "details": {}
  },
  "timestamp": "2025-06-27T10:30:00Z"
}
```

### 페이지네이션
- **파라미터**: `page` (기본값: 1), `limit` (기본값: 10, 최대: 100)
- **응답**: `pagination` 객체에 currentPage, totalPages, totalItems, hasNext, hasPrev 포함

## 3. 인증 및 권한 관리 (RBAC)

### 권한 레벨
1. **Super-Admin**: 전산실 담당자 (모든 메뉴 + 사용자 관리)
2. **Dept-Admin**: 간호부/검사실 책임자 (태그, 콘텐츠, 대기열)
3. **Staff**: 접수/창구 직원 (대기열 조회/수정만)
4. **Patient**: 일반 환자 (본인 정보만 접근)
5. **Medical**: 의료진 (환자 호출, 대기열 관리)

### JWT 토큰 구조
- **만료시간**: 1시간
- **Refresh**: 없음 (재로그인 방식)
- **저장**: httpOnly 설정 검토

### 인증 엔드포인트
- `POST /auth/simple-login`: 간편 로그인 (전화번호 뒷4자리 + 생년월일)
- `POST /auth/kakao`: 카카오톡 OAuth
- `POST /auth/pass`: PASS 앱 인증
- `POST /auth/logout`: 로그아웃

## 4. 핵심 데이터 모델

### 사용자 객체 (User)
```typescript
interface User {
  object: "user";
  userId: string; // UUID
  role: "patient" | "doctor" | "admin" | "staff" | "medical";
  name: string;
  phoneNumber: string; // 암호화, 뒷4자리만 표시
  birthDate: string; // YYYY-MM-DD
  lastLoginAt: string; // ISO 8601
}
```

### NFC 태그 객체
```typescript
interface NFCTag {
  object: "nfc_tag";
  tagId: string;
  code: string; // 하드웨어 코드
  location: LocationObject;
  isActive: boolean;
  examId?: string;
  batteryLevel?: number;
  lastScannedAt?: string;
  createdAt: string;
}
```

### 검사 객체 (Exam)
```typescript
interface Exam {
  object: "exam";
  examId: string;
  title: string;
  description: string;
  department: string;
  category: "imaging" | "blood" | "urine" | "cardiac";
  duration: number; // 분
  isActive: boolean;
  preparations: PreparationObject[];
  location: LocationObject;
}
```

### 대기열 객체 (Queue)
```typescript
interface Queue {
  object: "queue";
  queueId: string;
  userId: string;
  examId: string;
  status: "waiting" | "called" | "in_progress" | "completed" | "cancelled";
  queueNumber: number;
  estimatedWaitTime: number; // 분
  priority: "normal" | "urgent" | "emergency";
  calledAt?: string;
  createdAt: string;
  updatedAt: string;
}
```

## 5. 주요 API 엔드포인트

### NFC 태그 관리
- `POST /nfc/scan`: NFC 태그 스캔 처리
- `GET /nfc/tags/{tagId}`: 태그 정보 조회
- `POST /nfc/scan-log`: 스캔 로그 기록

### 대기열 관리
- `GET /queue/status`: 실시간 대기 현황
- `POST /queue/join`: 대기열 등록
- `GET /queue/my-position`: 내 대기 순서 조회

### AI 챗봇
- `POST /chatbot/query`: 텍스트 질문 처리
- `POST /chatbot/voice-query`: 음성 질문 처리
- `GET /chatbot/faq`: FAQ 목록

### 관리자 대시보드
- `GET /admin/queue/realtime`: 실시간 대기열 조회 (SSE)
- `POST /admin/content/exams`: 검사 콘텐츠 등록
- `PUT /admin/tags/{tagId}`: 태그 정보 수정

## 6. 보안 및 개인정보 보호

### 암호화 요구사항
- **전송**: HTTPS/TLS 1.3 필수
- **저장**: AES-256-GCM (개인정보)
- **JWT**: HS256 알고리즘

### 개인정보 처리
- **수집 최소화**: 필요한 정보만 수집
- **접근 제한**: 환자 본인 정보만 접근 가능
- **로그 기록**: 모든 접근 기록 저장
- **삭제 권리**: GDPR 준수 데이터 삭제 요청 처리

### 속도 제한
- **일반 사용자**: 분당 60건
- **관리자**: 분당 120건
- **AI 챗봇**: 분당 30건

## 7. 에러 처리 및 상태 코드

### HTTP 상태 코드
- **200**: 요청 성공
- **201**: 리소스 생성 성공
- **400**: 잘못된 요청 (INVALID_REQUEST)
- **401**: 인증 실패 (UNAUTHORIZED)
- **403**: 접근 권한 없음 (FORBIDDEN)
- **404**: 리소스 없음 (NOT_FOUND)
- **429**: 요청 한도 초과 (RATE_LIMITED)
- **500**: 서버 내부 오류 (INTERNAL_ERROR)

### 에러 코드 정의
- 에러 코드는 영문 대문자와 언더스코어 사용
- 메시지는 한국어로 사용자 친화적으로 작성
- details 객체에 추가 정보 포함

## 8. 개발 시 주의사항

### 절대 금지사항
- **localStorage/sessionStorage 사용 금지**: Claude.ai 환경에서 지원되지 않음
- **의료적 판단 관련 기능 구현 금지**: 법적 이슈 방지
- **개인정보 평문 저장 금지**: 모든 민감정보는 암호화 필수

### React 개발 시
- **상태 관리**: useState, useReducer 사용 (브라우저 스토리지 대신)
- **스타일링**: Tailwind 코어 유틸리티 클래스만 사용
- **컴포넌트**: 기본값이 있는 props 설계, default export 사용

### Node.js API 개발 시
- **미들웨어**: JWT 인증, CORS, Rate Limiting 적용
- **데이터베이스**: 연결 풀 사용, 트랜잭션 적절히 활용
- **로깅**: Winston 등을 활용한 구조화된 로그

### Python AI 서버 개발 시
- **프레임워크**: Flask 사용
- **모델**: LSTM (대기시간 예측), BERT (자연어 처리)
- **API 연동**: Node.js 서버와 REST API로 통신

## 9. 테스트 및 배포

### 테스트 환경
- **Unit Test**: Jest (Node.js), pytest (Python)
- **Integration Test**: Supertest (API)
- **E2E Test**: Playwright

### 배포 환경
- **개발**: localhost
- **스테이징**: AWS EC2
- **프로덕션**: AWS EC2 + RDS + S3 + CloudFront


이 규칙을 따라 개발할 때는 항상 보안, 접근성, 그리고 의료 환경의 특수성을 고려하여 구현해야 합니다.