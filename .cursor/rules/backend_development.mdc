---
description: 
globs: backend/**/*.js,backend/**/*.ts,api/**/*.js,api/**/*.ts,server/**/*.js,server/**/*.ts
alwaysApply: false
---
# Node.js Backend Development Rules

**파일 패턴**: `backend/**/*.{js,ts}`, `api/**/*.{js,ts}`, `server/**/*.{js,ts}`
**적용 조건**: Node.js Express API 서버 개발 시

**도움이 되는 작업**: API 엔드포인트 개발, 인증 미들웨어, 데이터베이스 연동, 보안 구현, 에러 처리

## 1. Express 서버 기본 구조

### 서버 설정
```javascript
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const app = express();

// 보안 미들웨어
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      scriptSrc: ["'self'", "cdn.jsdelivr.net"]
    }
  }
}));

// CORS 설정
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// Rate Limiting
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1분
  max: (req) => {
    if (req.user?.role === 'admin') return 120;
    if (req.user?.role === 'medical') return 100;
    return 60; // 일반 사용자
  },
  message: {
    success: false,
    error: {
      code: 'RATE_LIMITED',
      message: '요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'
    }
  }
});

app.use(limiter);
app.use(express.json({ limit: '1mb' }));

// API 라우터 연결
app.use('/api/v1/auth', require('./routes/auth'));
app.use('/api/v1/nfc', require('./routes/nfc'));
app.use('/api/v1/queue', require('./routes/queue'));
app.use('/api/v1/chatbot', require('./routes/chatbot'));
app.use('/api/v1/admin', require('./routes/admin'));

module.exports = app;
```

## 2. 인증 미들웨어

### JWT 토큰 검증
```javascript
const jwt = require('jsonwebtoken');

// JWT 토큰 검증 미들웨어
const verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  
  if (!authHeader) {
    return res.status(401).json({
      success: false,
      error: {
        code: 'UNAUTHORIZED',
        message: '인증 토큰이 필요합니다.'
      },
      timestamp: new Date().toISOString()
    });
  }

  const token = authHeader.split(' ')[1]; // "Bearer TOKEN"

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({
      success: false,
      error: {
        code: 'UNAUTHORIZED',
        message: 'JWT 토큰이 유효하지 않습니다.'
      },
      timestamp: new Date().toISOString()
    });
  }
};

// 권한별 접근 제어
const requireRole = (roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: {
          code: 'UNAUTHORIZED',
          message: '인증이 필요합니다.'
        }
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: {
          code: 'FORBIDDEN',
          message: '접근 권한이 없습니다.'
        }
      });
    }

    next();
  };
};

module.exports = { verifyToken, requireRole };
```

## 3. 표준 응답 포맷터

### 응답 헬퍼 함수
```javascript
// utils/responseHelper.js
const createResponse = (success, data = null, message = '', error = null) => {
  const response = {
    success,
    timestamp: new Date().toISOString()
  };

  if (success) {
    response.data = data;
    if (message) response.message = message;
  } else {
    response.error = error;
  }

  return response;
};

const successResponse = (res, data, message = '요청이 성공적으로 처리되었습니다.', statusCode = 200) => {
  res.status(statusCode).json(createResponse(true, data, message));
};

const errorResponse = (res, code, message, statusCode = 400, details = {}) => {
  res.status(statusCode).json(
    createResponse(false, null, '', { code, message, details })
  );
};

// 페이지네이션 응답
const paginatedResponse = (res, items, currentPage, totalItems, limit) => {
  const totalPages = Math.ceil(totalItems / limit);
  
  successResponse(res, {
    items,
    pagination: {
      currentPage: parseInt(currentPage),
      totalPages,
      totalItems,
      hasNext: currentPage < totalPages,
      hasPrev: currentPage > 1
    }
  });
};

module.exports = { successResponse, errorResponse, paginatedResponse };
```

## 4. 데이터베이스 연동

### MySQL 연결 풀 설정
```javascript
// config/database.js
const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// 트랜잭션 헬퍼
const withTransaction = async (callback) => {
  const connection = await pool.getConnection();
  
  try {
    await connection.beginTransaction();
    const result = await callback(connection);
    await connection.commit();
    return result;
  } catch (error) {
    await connection.rollback();
    throw error;
  } finally {
    connection.release();
  }
};

module.exports = { pool, withTransaction };
```

### 모델 예시 (User)
```javascript
// models/User.js
const { pool } = require('../config/database');
const bcrypt = require('bcrypt');

class User {
  static async findByPhone(phoneNumber) {
    const [rows] = await pool.execute(
      'SELECT * FROM users WHERE phone_number = ?',
      [phoneNumber]
    );
    return rows[0] || null;
  }

  static async create(userData) {
    const { name, phoneNumber, birthDate, role = 'patient' } = userData;
    
    const [result] = await pool.execute(
      `INSERT INTO users (user_id, name, phone_number, birth_date, role, created_at) 
       VALUES (UUID(), ?, ?, ?, ?, NOW())`,
      [name, phoneNumber, birthDate, role]
    );

    return result.insertId;
  }

  static async updateLastLogin(userId) {
    await pool.execute(
      'UPDATE users SET last_login_at = NOW() WHERE user_id = ?',
      [userId]
    );
  }

  static async findById(userId) {
    const [rows] = await pool.execute(
      `SELECT user_id, name, phone_number, birth_date, role, 
              last_login_at, created_at 
       FROM users WHERE user_id = ?`,
      [userId]
    );
    return rows[0] || null;
  }
}

module.exports = User;
```

## 5. API 라우터 구현

### 인증 라우터
```javascript
// routes/auth.js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const User = require('../models/User');
const { successResponse, errorResponse } = require('../utils/responseHelper');

const router = express.Router();

// 간편 로그인
router.post('/simple-login', async (req, res) => {
  try {
    const { phoneLast4, birthDate } = req.body;

    if (!phoneLast4 || !birthDate) {
      return errorResponse(res, 'INVALID_REQUEST', '전화번호 뒷자리와 생년월일을 입력해주세요.');
    }

    // 전화번호 뒷자리로 사용자 조회 (실제로는 더 복잡한 로직 필요)
    const user = await User.findByPhoneLast4(phoneLast4, birthDate);
    
    if (!user) {
      return errorResponse(res, 'USER_NOT_FOUND', '일치하는 사용자 정보를 찾을 수 없습니다.', 404);
    }

    // JWT 토큰 생성
    const token = jwt.sign(
      { 
        userId: user.user_id, 
        role: user.role,
        name: user.name 
      },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // 마지막 로그인 시간 업데이트
    await User.updateLastLogin(user.user_id);

    successResponse(res, {
      token,
      user: {
        userId: user.user_id,
        name: user.name,
        role: user.role
      }
    }, '로그인이 완료되었습니다.');

  } catch (error) {
    console.error('로그인 오류:', error);
    errorResponse(res, 'INTERNAL_ERROR', '서버 내부 오류가 발생했습니다.', 500);
  }
});

module.exports = router;
```

### NFC 라우터
```javascript
// routes/nfc.js
const express = require('express');
const { verifyToken } = require('../middleware/auth');
const NFCTag = require('../models/NFCTag');
const { successResponse, errorResponse } = require('../utils/responseHelper');

const router = express.Router();

// NFC 태그 스캔 처리
router.post('/scan', verifyToken, async (req, res) => {
  try {
    const { tagId, timestamp } = req.body;
    const userId = req.user.userId;

    if (!tagId) {
      return errorResponse(res, 'INVALID_REQUEST', '태그 ID가 필요합니다.');
    }

    // 태그 정보 조회
    const tag = await NFCTag.findById(tagId);
    
    if (!tag || !tag.is_active) {
      return errorResponse(res, 'TAG_NOT_FOUND', '유효하지 않은 태그입니다.', 404);
    }

    // 스캔 로그 기록
    await NFCTag.logScan(tagId, userId, timestamp);

    // 태그 위치에 따른 맞춤 정보 제공
    const locationInfo = await getLocationInfo(tag, userId);

    successResponse(res, {
      tagInfo: {
        tagId: tag.tag_id,
        location: tag.location,
        examId: tag.exam_id
      },
      locationInfo
    }, '태그 스캔이 완료되었습니다.');

  } catch (error) {
    console.error('NFC 스캔 오류:', error);
    errorResponse(res, 'INTERNAL_ERROR', '스캔 처리 중 오류가 발생했습니다.', 500);
  }
});

// 위치별 정보 조회 헬퍼 함수
const getLocationInfo = async (tag, userId) => {
  // 태그 위치에 따른 맞춤 정보 로직
  if (tag.exam_id) {
    // 검사실 태그인 경우
    const exam = await Exam.findById(tag.exam_id);
    const queue = await Queue.findByUserAndExam(userId, tag.exam_id);
    
    return {
      type: 'exam_room',
      exam,
      queueStatus: queue
    };
  } else {
    // 일반 위치 태그인 경우
    return {
      type: 'general_location',
      location: tag.location
    };
  }
};

module.exports = router;
```

## 6. 에러 처리 미들웨어

### 글로벌 에러 핸들러
```javascript
// middleware/errorHandler.js
const errorHandler = (err, req, res, next) => {
  console.error('Error:', {
    message: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    user: req.user?.userId,
    timestamp: new Date().toISOString()
  });

  // JWT 관련 에러
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({
      success: false,
      error: {
        code: 'UNAUTHORIZED',
        message: '유효하지 않은 토큰입니다.'
      },
      timestamp: new Date().toISOString()
    });
  }

  // 토큰 만료 에러
  if (err.name === 'TokenExpiredError') {
    return res.status(401).json({
      success: false,
      error: {
        code: 'TOKEN_EXPIRED',
        message: '토큰이 만료되었습니다. 다시 로그인해주세요.'
      },
      timestamp: new Date().toISOString()
    });
  }

  // 데이터베이스 에러
  if (err.code === 'ER_DUP_ENTRY') {
    return res.status(409).json({
      success: false,
      error: {
        code: 'CONFLICT',
        message: '이미 존재하는 데이터입니다.'
      },
      timestamp: new Date().toISOString()
    });
  }

  // 기본 서버 에러
  res.status(500).json({
    success: false,
    error: {
      code: 'INTERNAL_ERROR',
      message: '서버 내부 오류가 발생했습니다.'
    },
    timestamp: new Date().toISOString()
  });
};

module.exports = errorHandler;
```

## 7. 보안 유틸리티

### 암호화 헬퍼
```javascript
// utils/encryption.js
const crypto = require('crypto');

const ALGORITHM = 'aes-256-gcm';
const SECRET_KEY = crypto.scryptSync(process.env.ENCRYPTION_KEY, 'salt', 32);

// 개인정보 암호화
const encrypt = (text) => {
  const iv = crypto.randomBytes(12);
  const cipher = crypto.createCipher(ALGORITHM, SECRET_KEY);
  cipher.setAutoPadding(false);
  
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  
  const authTag = cipher.getAuthTag();
  
  return {
    encrypted,
    iv: iv.toString('hex'),
    authTag: authTag.toString('hex')
  };
};

// 개인정보 복호화
const decrypt = (encryptedData) => {
  const { encrypted, iv, authTag } = encryptedData;
  
  const decipher = crypto.createDecipher(ALGORITHM, SECRET_KEY);
  decipher.setAuthTag(Buffer.from(authTag, 'hex'));
  
  let decrypted = decipher.update(encrypted, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  
  return decrypted;
};

// 전화번호 마스킹
const maskPhoneNumber = (phoneNumber) => {
  if (!phoneNumber || phoneNumber.length < 4) return phoneNumber;
  const last4 = phoneNumber.slice(-4);
  return `****${last4}`;
};

module.exports = { encrypt, decrypt, maskPhoneNumber };
```

## 8. 파일 구조

```
backend/
├── config/
│   ├── database.js      # DB 연결 설정
│   └── env.js          # 환경변수 설정
├── middleware/
│   ├── auth.js         # 인증 미들웨어
│   ├── errorHandler.js # 에러 처리
│   └── validation.js   # 입력 검증
├── models/
│   ├── User.js         # 사용자 모델
│   ├── NFCTag.js       # NFC 태그 모델
│   ├── Queue.js        # 대기열 모델
│   └── Exam.js         # 검사 모델
├── routes/
│   ├── auth.js         # 인증 라우터
│   ├── nfc.js          # NFC 라우터
│   ├── queue.js        # 대기열 라우터
│   ├── chatbot.js      # 챗봇 라우터
│   └── admin.js        # 관리자 라우터
├── utils/
│   ├── responseHelper.js # 응답 헬퍼
│   ├── encryption.js    # 암호화 유틸
│   └── validators.js    # 검증 함수
├── tests/
│   ├── auth.test.js     # 인증 테스트
│   └── nfc.test.js      # NFC 테스트
├── app.js              # Express 앱 설정
└── server.js           # 서버 시작점
```


이 규칙들을 따라 개발하면 보안이 강화되고 확장 가능한 Node.js API 서버를 구축할 수 있습니다.